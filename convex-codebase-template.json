{
  "code/tsconfig.node.json": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n",
  "code/index.html": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"/src/index.css\" />\n    <title>Oreo - App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n",
  "code/.env.local": "# Deployment used by `npx convex dev`\nCONVEX_DEPLOYMENT=anonymous:anonymous-convex-test\n\nVITE_REAL_CONVEX_URL=http://127.0.0.1:3210\n",
  "code/tsconfig.app.json": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n\n    /* Import paths */\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n",
  "code/package.json": "{\n  \"name\": \"convex-test\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"npm-run-all --parallel dev:frontend dev:backend\",\n    \"dev:frontend\": \"vite --open\",\n    \"dev:backend\": \"convex dev\",\n    \"predev\": \"convex dev --until-success && convex dashboard\",\n    \"build\": \"tsc -b && vite build\",\n    \"lint\": \"tsc && eslint .  --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"convex\": \"^1.23.0\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.21.0\",\n    \"@tailwindcss/vite\": \"^4.0.14\",\n    \"@types/node\": \"^22.13.10\",\n    \"@types/react\": \"^19.0.10\",\n    \"@types/react-dom\": \"^19.0.4\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"eslint\": \"^9.21.0\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^15.15.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^3.5.3\",\n    \"tailwindcss\": \"^4.0.14\",\n    \"typescript\": \"~5.7.2\",\n    \"typescript-eslint\": \"^8.24.1\",\n    \"vite\": \"^6.2.0\"\n  }\n}\n",
  "code/tsconfig.json": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}\n",
  "code/eslint.config.js": "import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  {\n    ignores: [\n      \"dist\",\n      \"eslint.config.js\",\n      \"convex/_generated\",\n      \"postcss.config.js\",\n      \"tailwind.config.js\",\n      \"vite.config.ts\",\n    ],\n  },\n  {\n    extends: [\n      js.configs.recommended,\n      ...tseslint.configs.recommendedTypeChecked,\n    ],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: {\n        ...globals.browser,\n        ...globals.node,\n      },\n      parserOptions: {\n        project: [\n          \"./tsconfig.node.json\",\n          \"./tsconfig.app.json\",\n          \"./convex/tsconfig.json\",\n        ],\n      },\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      // All of these overrides ease getting into\n      // TypeScript, and can be removed for stricter\n      // linting down the line.\n\n      // Only warn on unused variables, and ignore variables starting with `_`\n      \"@typescript-eslint/no-unused-vars\": [\n        \"warn\",\n        { varsIgnorePattern: \"^_\", argsIgnorePattern: \"^_\" },\n      ],\n\n      // Allow escaping the compiler\n      \"@typescript-eslint/ban-ts-comment\": \"error\",\n\n      // Allow explicit `any`s\n      \"@typescript-eslint/no-explicit-any\": \"off\",\n\n      // START: Allow implicit `any`s\n      \"@typescript-eslint/no-unsafe-argument\": \"off\",\n      \"@typescript-eslint/no-unsafe-assignment\": \"off\",\n      \"@typescript-eslint/no-unsafe-call\": \"off\",\n      \"@typescript-eslint/no-unsafe-member-access\": \"off\",\n      \"@typescript-eslint/no-unsafe-return\": \"off\",\n      // END: Allow implicit `any`s\n\n      // Allow async functions without await\n      // for consistency (esp. Convex `handler`s)\n      \"@typescript-eslint/require-await\": \"off\",\n    },\n  },\n);\n",
  "code/vite.config.ts": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport tailwindcss from \"@tailwindcss/vite\";\nimport path from \"path\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  server: {\n    allowedHosts: true,\n  }\n});\n",
  "code/convex/schema.ts": "import { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\n// The schema is entirely optional.\n// You can delete this file (schema.ts) and the\n// app will continue to work.\n// The schema provides more precise TypeScript types.\nexport default defineSchema({\n  numbers: defineTable({\n    value: v.number(),\n  }),\n});\n",
  "code/convex/tsconfig.json": "{\n  /* This TypeScript project config describes the environment that\n   * Convex functions run in and is used to typecheck them.\n   * You can modify it, but some settings required to use Convex.\n   */\n  \"compilerOptions\": {\n    /* These settings are not required by Convex and can be modified. */\n    \"allowJs\": true,\n    \"strict\": true,\n    \"moduleResolution\": \"Bundler\",\n    \"jsx\": \"react-jsx\",\n    \"skipLibCheck\": true,\n    \"allowSyntheticDefaultImports\": true,\n\n    /* These compiler options are required by Convex */\n    \"target\": \"ESNext\",\n    \"lib\": [\"ES2021\", \"dom\"],\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"ESNext\",\n    \"isolatedModules\": true,\n    \"noEmit\": true\n  },\n  \"include\": [\"./**/*\"],\n  \"exclude\": [\"./_generated\"]\n}\n",
  "code/convex/myFunctions.ts": "import { v } from \"convex/values\";\nimport { query, mutation, action } from \"./_generated/server\";\nimport { api } from \"./_generated/api\";\n\n// Write your Convex functions in any file inside this directory (`convex`).\n// See https://docs.convex.dev/functions for more.\n\n// You can read data from the database via a query:\nexport const listNumbers = query({\n  // Validators for arguments.\n  args: {\n    count: v.number(),\n  },\n\n  // Query implementation.\n  handler: async (ctx, args) => {\n    //// Read the database as many times as you need here.\n    //// See https://docs.convex.dev/database/reading-data.\n    const numbers = await ctx.db\n      .query(\"numbers\")\n      // Ordered by _creationTime, return most recent\n      .order(\"desc\")\n      .take(args.count);\n    return {\n      viewer: (await ctx.auth.getUserIdentity())?.name ?? null,\n      numbers: numbers.reverse().map((number) => number.value),\n    };\n  },\n});\n\n// You can write data to the database via a mutation:\nexport const addNumber = mutation({\n  // Validators for arguments.\n  args: {\n    value: v.number(),\n  },\n\n  // Mutation implementation.\n  handler: async (ctx, args) => {\n    //// Insert or modify documents in the database here.\n    //// Mutations can also read from the database like queries.\n    //// See https://docs.convex.dev/database/writing-data.\n\n    const id = await ctx.db.insert(\"numbers\", { value: args.value });\n\n    console.log(\"Added new document with id:\", id);\n    // Optionally, return a value from your mutation.\n    // return id;\n  },\n});\n\n// You can fetch data from and send data to third-party APIs via an action:\nexport const myAction = action({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Action implementation.\n  handler: async (ctx, args) => {\n    //// Use the browser-like `fetch` API to send HTTP requests.\n    //// See https://docs.convex.dev/functions/actions#calling-third-party-apis-and-using-npm-packages.\n    // const response = await ctx.fetch(\"https://api.thirdpartyservice.com\");\n    // const data = await response.json();\n\n    //// Query data by running Convex queries.\n    const data = await ctx.runQuery(api.myFunctions.listNumbers, {\n      count: 10,\n    });\n    console.log(data);\n\n    //// Write data by running Convex mutations.\n    await ctx.runMutation(api.myFunctions.addNumber, {\n      value: args.first,\n    });\n  },\n});\n",
  "code/public/.gitkeep": "",
  "code/src/App.tsx": "\"use client\";\n\nimport { useMutation, useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function App() {\n  return (\n    <>\n      <header className=\"sticky top-0 z-10 bg-light dark:bg-dark p-4 border-b-2 border-slate-200 dark:border-slate-800\">\n        Convex + React\n      </header>\n      <main className=\"p-8 flex flex-col gap-16\">\n        <h1 className=\"text-4xl font-bold text-center\">Convex + React</h1>\n        <Content />\n      </main>\n    </>\n  );\n}\n\nfunction Content() {\n  const { viewer, numbers } =\n    useQuery(api.myFunctions.listNumbers, {\n      count: 10,\n    }) ?? {};\n  const addNumber = useMutation(api.myFunctions.addNumber);\n\n  if (viewer === undefined || numbers === undefined) {\n    return (\n      <div className=\"mx-auto\">\n        <p>loading... (consider a loading skeleton)</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-8 max-w-lg mx-auto\">\n      <p>Welcome {viewer ?? \"Anonymous\"}!</p>\n      <p>\n        Click the button below and open this page in another window - this data\n        is persisted in the Convex cloud database!\n      </p>\n      <p>\n        <button\n          className=\"bg-dark dark:bg-light text-light dark:text-dark text-sm px-4 py-2 rounded-md border-2\"\n          onClick={() => {\n            void addNumber({ value: Math.floor(Math.random() * 10) });\n          }}\n        >\n          Add a random number\n        </button>\n      </p>\n      <p>\n        Numbers:{\" \"}\n        {numbers?.length === 0\n          ? \"Click the button!\"\n          : (numbers?.join(\", \") ?? \"...\")}\n      </p>\n      <p>\n        Edit{\" \"}\n        <code className=\"text-sm font-bold font-mono bg-slate-200 dark:bg-slate-800 px-1 py-0.5 rounded-md\">\n          convex/myFunctions.ts\n        </code>{\" \"}\n        to change your backend\n      </p>\n      <p>\n        Edit{\" \"}\n        <code className=\"text-sm font-bold font-mono bg-slate-200 dark:bg-slate-800 px-1 py-0.5 rounded-md\">\n          src/App.tsx\n        </code>{\" \"}\n        to change your frontend\n      </p>\n      <div className=\"flex flex-col\">\n        <p className=\"text-lg font-bold\">Useful resources:</p>\n        <div className=\"flex gap-2\">\n          <div className=\"flex flex-col gap-2 w-1/2\">\n            <ResourceCard\n              title=\"Convex docs\"\n              description=\"Read comprehensive documentation for all Convex features.\"\n              href=\"https://docs.convex.dev/home\"\n            />\n            <ResourceCard\n              title=\"Stack articles\"\n              description=\"Learn about best practices, use cases, and more from a growing\n            collection of articles, videos, and walkthroughs.\"\n              href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html\"\n            />\n          </div>\n          <div className=\"flex flex-col gap-2 w-1/2\">\n            <ResourceCard\n              title=\"Templates\"\n              description=\"Browse our collection of templates to get started quickly.\"\n              href=\"https://www.convex.dev/templates\"\n            />\n            <ResourceCard\n              title=\"Discord\"\n              description=\"Join our developer community to ask questions, trade tips & tricks,\n            and show off your projects.\"\n              href=\"https://www.convex.dev/community\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ResourceCard({\n  title,\n  description,\n  href,\n}: {\n  title: string;\n  description: string;\n  href: string;\n}) {\n  return (\n    <div className=\"flex flex-col gap-2 bg-slate-200 dark:bg-slate-800 p-4 rounded-md h-28 overflow-auto\">\n      <a href={href} className=\"text-sm underline hover:no-underline\">\n        {title}\n      </a>\n      <p className=\"text-xs\">{description}</p>\n    </div>\n  );\n}\n",
  "code/src/main.tsx": "import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\n\nconst convex = new ConvexReactClient(import.meta.env.VITE_REAL_CONVEX_URL as string);\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </StrictMode>,\n);\n",
  "code/src/index.css": "@import \"tailwindcss\";\n\n@theme {\n  --color-light: #ffffff;\n  --color-dark: #171717;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    color: var(--color-light);\n    background: var(--color-dark);\n    font-family: Arial, Helvetica, sans-serif;\n  }\n}\n\n@media (prefers-color-scheme: light) {\n  body {\n    color: var(--color-dark);\n    background: var(--color-light);\n    font-family: Arial, Helvetica, sans-serif;\n  }\n}\n",
  "code/src/vite-env.d.ts": "/// <reference types=\"vite/client\" />\n"
}
